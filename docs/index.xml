<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>RuglioBoi</title>
<link>https://ruglio.github.io/Web/</link>
<atom:link href="https://ruglio.github.io/Web/index.xml" rel="self" type="application/rss+xml"/>
<description>AR&#39;s personal website</description>
<generator>quarto-1.5.47</generator>
<lastBuildDate>Sun, 07 Jul 2024 22:00:00 GMT</lastBuildDate>
<item>
  <title>Multi-taks Gaussian processes</title>
  <dc:creator>Andrea Ruglioni</dc:creator>
  <link>https://ruglio.github.io/Web/posts/dkl/mgp.html</link>
  <description><![CDATA[ 





<section id="ciao" class="level1">




</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">Ciao</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-FORRESTER200950" class="csl-entry">
Forrester, Alexander I. J., and Andy J. Keane. 2009. <span>“Recent Advances in Surrogate-Based Optimization.”</span> <em>Progress in Aerospace Sciences</em> 45 (1): 50–79. <a href="https://www.sciencedirect.com/science/article/pii/S0376042108000766">https://www.sciencedirect.com/science/article/pii/S0376042108000766</a>.
</div>
<div id="ref-frazier2018tutorial" class="csl-entry">
Frazier, Peter I. 2018. <span>“<span class="nocase">A Tutorial on Bayesian Optimization</span>.”</span> <a href="https://arxiv.org/abs/1807.02811">https://arxiv.org/abs/1807.02811</a>.
</div>
<div id="ref-garnett_bayesoptbook_2023" class="csl-entry">
Garnett, Roman. 2023. <em><span>Bayesian Optimization</span></em>. Cambridge University Press.
</div>
</div></section></div> ]]></description>
  <category>machine-learning</category>
  <guid>https://ruglio.github.io/Web/posts/dkl/mgp.html</guid>
  <pubDate>Sun, 07 Jul 2024 22:00:00 GMT</pubDate>
  <media:content url="https://ruglio.github.io/Web/posts/dkl/gp.png" medium="image" type="image/png" height="105" width="144"/>
</item>
<item>
  <title>Introduction to Gaussian processes</title>
  <dc:creator>Andrea Ruglioni</dc:creator>
  <link>https://ruglio.github.io/Web/posts/dkl/gp.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to the first installment of our series on deep kernel learning. In this post, we’ll delve into Gaussian processes (GPs) and their application as regressors. We’ll start by exploring what GPs are and why they are powerful tools for regression tasks. In subsequent posts, we’ll build on this foundation to discuss multi-task Gaussian processes and how they can be combined with neural networks to create deep kernel models.</p>
</section>
<section id="gaussian-processes" class="level2">
<h2 class="anchored" data-anchor-id="gaussian-processes">Gaussian processes</h2>
<p>To understand Gaussian processes fully, it’s important to briefly mention the Kolmogorov extension theorem. This theorem guarantees the existence of a stochastic process, i.e., a collection of random variables <img src="https://latex.codecogs.com/png.latex?%5C%7BY_x%5C%7D_%7Bx%20%5Cin%20%5Cmathcal%7BX%7D%7D,%20Y_x%20%5Cin%20%5Cmathbb%7BR%7D">, that satisfies a specified finite-dimensional distribution. For instance, it ensures that we can define a Gaussian process by specyfing that any finite set of random variables has a multivariate Gaussian distribution, without worrying about the infinite-dimensional nature of the process. Observe that, in a similar matter, we could define a t-student process, by imposing that finite-dimensional distributions are t-student.</p>
<p>Therefore, similar to a multivariate Gaussian distribution, a Gaussian process <img src="https://latex.codecogs.com/png.latex?f"> is defined by its mean function <img src="https://latex.codecogs.com/png.latex?m(%5Ccdot)%20:%20%5Cmathcal%7BX%7D%20%5Cto%20%5Cmathbb%7BR%7D"> and covariance function <img src="https://latex.codecogs.com/png.latex?k(%5Ccdot,%20%5Ccdot)%20:%20%5Cmathcal%7BX%7D%20%5Ctimes%20%5Cmathcal%7BX%7D%20%5Cto%20%5Cmathbb%7BR%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af%20%5Csim%20GP(m,%20k),%0A"></p>
<p>and it can be interpreted as an infinite-dimensional generalization of a multivariate Gaussian distribution.</p>
<p>In a regression setting, we could use <img src="https://latex.codecogs.com/png.latex?f"> as a surrogate model of a function <img src="https://latex.codecogs.com/png.latex?g:%20%5Cmathcal%7BX%7D%20%5Cto%20%5Cmathbb%7BR%7D">, where <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BX%7D"> is the input space. Suppose you have a set of input points <img src="https://latex.codecogs.com/png.latex?X%20=%20%5C%7Bx_1,%20x_2,%20%5Cldots,%20x_n%5C%7D">, with observations <img src="https://latex.codecogs.com/png.latex?y%20=%20%5C%7By_1%20=%20g(x_1),%20y_2%20=%20g(x_2),%20%5Cldots,%20y_n%20=%20g(x_n)%5C%7D">, the joint distribution of the observed outputs <img src="https://latex.codecogs.com/png.latex?y">, assuming a GP prior, is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bpmatrix%7D%0Ay_1%20%5C%5C%0A%5Cvdots%20%5C%5C%0Ay_n%0A%5Cend%7Bpmatrix%7D%20%5Csim%20%5Cmathcal%7BN%7D%5Cleft(%0A%5Cmathbf%7Bm%7D%20=%0A%5Cbegin%7Bpmatrix%7D%0Am(x_1)%20%5C%5C%0A%5Cvdots%20%5C%5C%0Am(x_n)%0A%5Cend%7Bpmatrix%7D,%0A%5Cmathbf%7BK%7D%20=%0A%5Cbegin%7Bpmatrix%7D%0Ak(x_1,%20x_1)%20&amp;%20%5Cdots%20&amp;%20k(x_1,%20x_n)%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0Ak(x_n,%20x_1)%20&amp;%20%5Cdots%20&amp;%20k(x_n,%20x_n)%0A%5Cend%7Bpmatrix%7D%5Cright),%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bm%7D"> is the vector of mean function values and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"> is the covariance matrix of the function values at the input points. This approach allows us to make predictions at new input points <img src="https://latex.codecogs.com/png.latex?x_*"> by conditioning on the observed data, providing not only point estimates but also uncertainty estimates.</p>
<section id="making-predictions" class="level3">
<h3 class="anchored" data-anchor-id="making-predictions">Making predictions</h3>
<p>To make a prediction <img src="https://latex.codecogs.com/png.latex?y_*%20=%20g(x_*)"> at new input point, we use the joint distribution of the observed outputs <img src="https://latex.codecogs.com/png.latex?y"> and the function values at <img src="https://latex.codecogs.com/png.latex?x_*">, which is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bpmatrix%7D%0Ay%20%5C%5C%0Ay_*%0A%5Cend%7Bpmatrix%7D%20%5Csim%20%5Cmathcal%7BN%7D%5Cleft(%0A%5Cbegin%7Bpmatrix%7D%0A%5Cmathbf%7Bm%7D%20%5C%5C%0Am(x_*)%0A%5Cend%7Bpmatrix%7D,%0A%5Cbegin%7Bpmatrix%7D%0A%5Cmathbf%7BK%7D%20&amp;%20k(X,%20x_*)%20%5C%5C%0Ak(x_*,%20X)%20&amp;%20k(x_*,%20x_*)%0A%5Cend%7Bpmatrix%7D%5Cright)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?k(x_*,%20X)"> is vector of covariances between the new input point <img src="https://latex.codecogs.com/png.latex?x_*"> and the observed data points <img src="https://latex.codecogs.com/png.latex?X">. The conditional distribution of <img src="https://latex.codecogs.com/png.latex?y_*"> given <img src="https://latex.codecogs.com/png.latex?y"> is then Gaussian with mean and covariance:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmu(x_*)%20=%20k(x_*,%20X)%20%5Cmathbf%7BK%7D%5E%7B-1%7D%20(y%20-%20%5Cmathbf%7Bm%7D),%0A"> <img src="https://latex.codecogs.com/png.latex?%0As%5E2(x_*)%20=%20k(x_*,%20x_*)%20-%20k(x_*,%20X)%20%5Cmathbf%7BK%7D%5E%7B-1%7D%20k(X,%20x_*).%0A"></p>
<p>Therefore, given the observed data, we can estimate the function value at a new input point <img src="https://latex.codecogs.com/png.latex?x_*"> as <img src="https://latex.codecogs.com/png.latex?%5Cmu(x_*)"> and quantify the uncertainty in the prediction as <img src="https://latex.codecogs.com/png.latex?s%5E2(x_*)">. This is a key advantage of GPs, which can be important in decision-making processes.</p>
</section>
</section>
<section id="interactive-visualizations" class="level2">
<h2 class="anchored" data-anchor-id="interactive-visualizations">Interactive visualizations</h2>
<p>Let’s explore some interactive plots to better understand how the kernel functions influence the Gaussian process model. Indeed, the choice of the kernel function is crucial in defining the prior over functions, as it determines the smoothness and periodicity of the functions that the GP can model. Therefore, they play a fundamental role in the model’s flexibility and generalization capabilities, and they can be tailored to the specific characteristics of the data at hand. On the other hand, the mean function is usually set constant, as the kernel is flexible enough.</p>
<section id="squared-exponential-kernel" class="level3">
<h3 class="anchored" data-anchor-id="squared-exponential-kernel">Squared exponential kernel</h3>
<p>The squared exponential kernel (also known as the RBF kernel) is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ak_%7B%5Ctext%7BExp%7D%7D(x,%20x')%20=%20%5Csigma%5E2%20%5Cexp%20%5Cleft(%20-%5Cfrac%7B(x%20-%20x')%5E2%7D%7B2l%5E2%7D%20%5Cright)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2"> is the variance and <img src="https://latex.codecogs.com/png.latex?l"> is the length scale. Below is an interactive plot that shows how the squared exponential kernel depends on the lengthscale and variance. Notice that with a small length scale, the function is more wiggly. Instead, with a large length scale it is smoother, as the kernel function decays more slowly with distance (i.e., the correlation between faraway points is higher, and they are more similar to each other). Instead, the variance controls the amplitude of the function, with higher values leading to more variability.</p>
<pre class="shinylive-python" data-engine="python"><code>#| standalone: true
#| viewerHeight: 475

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import multivariate_normal
from shiny import App, render, ui


# Define the kernel function
def exponential_quadratic_kernel(x1, x2, l=1.0, sigma2=1.0):
    """Computes the exponential quadratic kernel (squared exponential kernel)."""
    sqdist = np.sum(x1**2, 1).reshape(-1, 1) + np.sum(x2**2, 1) - 2 * np.dot(x1, x2.T)
    return sigma2 * np.exp(-0.5 / l**2 * sqdist)

# Define the input space
X = np.linspace(-4, 4, 100).reshape(-1, 1)

def plot_kernel_and_samples(l, sigma2):
    # Compute the kernel matrix
    K = exponential_quadratic_kernel(X, X, l=l, sigma2=sigma2)

    # Create the plot
    fig, ax = plt.subplots(2, 1, figsize=(18, 6), sharex=True)

    # Plot the kernel
    ax[0].plot(X, exponential_quadratic_kernel(X, np.zeros((1,1)), l=l, sigma2=sigma2))
    ax[0].set_title(f"Squared exponential kernel function")

    # Sample 5 functions from the Gaussian process defined by the kernel
    mean = np.zeros(100)
    cov = K
    samples = multivariate_normal.rvs(mean, cov, 5)

    # Plot the samples
    for i in range(5):
        ax[1].plot(X, samples[i])
    ax[1].set_title("Samples from the GP")
    ax[1].set_xlabel("x")

    plt.tight_layout()
    return fig

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_slider("length_scale", "Length Scale (l):", min=0.1, max=5.0, value=1.0, step=0.1),
            ui.input_slider("variance", "Variance (σ²):", min=0.1, max=5.0, value=1.0, step=0.1)
        ),
        ui.panel_main(
            ui.output_plot("kernelPlot")
        )
    )
)

def server(input, output, session):
    @output
    @render.plot
    def kernelPlot():
        l = input.length_scale()
        sigma2 = input.variance()
        fig = plot_kernel_and_samples(l, sigma2)
        return fig

app = App(app_ui, server)</code></pre>
</section>
<section id="matérn-kernel" class="level3">
<h3 class="anchored" data-anchor-id="matérn-kernel">Matérn kernel</h3>
<p>The Matérn kernel is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ak_%7B%5Ctext%7BMat%C3%A9rn%7D%7D(x,%20x')%20=%20%5Csigma%5E2%20%5Cfrac%7B2%5E%7B1-%5Cnu%7D%7D%7B%5CGamma(%5Cnu)%7D%20%5Cleft(%20%5Csqrt%7B2%5Cnu%7D%20%5Cfrac%7B%7Cx%20-%20x'%7C%7D%7Bl%7D%20%5Cright)%5E%7B%5Cnu%7D%20K_%7B%5Cnu%7D%20%5Cleft(%20%5Csqrt%7B2%5Cnu%7D%20%5Cfrac%7B%7Cx%20-%20x'%7C%7D%7Bl%7D%20%5Cright)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cnu"> controls the smoothness of the function, <img src="https://latex.codecogs.com/png.latex?l"> is the length scale, <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2"> is the variance, and <img src="https://latex.codecogs.com/png.latex?K_%7B%5Cnu%7D"> is the modified Bessel function. The former two parameters have the same effect as in the squared exponential kernel, while <img src="https://latex.codecogs.com/png.latex?%5Cnu"> controls the smoothness of the function. Indeed, we have that the samples generated have smoothness <img src="https://latex.codecogs.com/png.latex?%5Clceil%20%5Cnu%20%5Crceil%20-%201">, and for <img src="https://latex.codecogs.com/png.latex?%5Cnu%20%5Cto%20%5Cinfty">, the Matérn kernel converges to the squared exponential kernel, leading to infinitely smooth functions.</p>
<pre class="shinylive-python" data-engine="python"><code>#| standalone: true
#| viewerHeight: 475

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import multivariate_normal
from shiny import App, render, ui
from scipy.special import kv, gamma
from scipy.spatial.distance import cdist


# Define the kernel function
def matern_kernel(x1, x2, l=1.0, sigma2=1.0, nu=1.5):
    """Computes the Matérn kernel."""
    D = cdist(x1, x2, 'euclidean')
    const = (2**(1-nu))/gamma(nu)
    K = const * (np.sqrt(2*nu)*D/l)**nu * kv(nu, np.sqrt(2*nu)*D/l)
    # Replace NaN values with 1 for x == x'
    K[np.isnan(K)] = 1
    K *= sigma2
    return K

# Define the input space
X = np.linspace(-4, 4, 100).reshape(-1, 1)

def plot_kernel_and_samples(l, sigma2, nu):
    # Compute the kernel matrix
    K = matern_kernel(X, X, l=l, sigma2=sigma2, nu=nu)

    # Create the plot
    fig, ax = plt.subplots(2, 1, figsize=(18, 6), sharex=True)

    # Plot the kernel
    ax[0].plot(X, matern_kernel(X, np.zeros((1, 1)), l=l, sigma2=sigma2, nu=nu))
    ax[0].set_title(f"Matern kernel function")

    # Sample 5 functions from the Gaussian process defined by the kernel
    mean = np.zeros(100)
    cov = K
    samples = multivariate_normal.rvs(mean, cov, 5)

    # Plot the samples
    for i in range(5):
        ax[1].plot(X, samples[i])
    ax[1].set_title("Samples from the GP")
    ax[1].set_xlabel("x")

    plt.tight_layout()
    return fig

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_slider("length_scale", "Length Scale (l):", min=0.1, max=5.0, value=1.0, step=0.1),
            ui.input_slider("variance", "Variance (σ²):", min=0.1, max=5.0, value=1.0, step=0.1),
            ui.input_slider("smoothness_param", "Smoothness param (v):", min=1.5, max=5.0, value=1.5, step=0.5)
        ),
        ui.panel_main(
            ui.output_plot("kernelPlot")
        )
    )
)

def server(input, output, session):
    @output
    @render.plot
    def kernelPlot():
        l = input.length_scale()
        sigma2 = input.variance()
        nu = input.smoothness_param()
        fig = plot_kernel_and_samples(l, sigma2, nu)
        return fig

app = App(app_ui, server)</code></pre>
</section>
</section>
<section id="noisy-observations" class="level2">
<h2 class="anchored" data-anchor-id="noisy-observations">Noisy observations</h2>
<p>Noise and measurement error are inevitable in real-world data, which can significantly impact the performance and reliability of predictive models. As a result, it is essential to take noise into account when modeling data with GP. We can represent noisy observations as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay%20=%20g(x)%20+%20%5Cepsilon%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> is a random variable representing the noise. Usually, we assume that <img src="https://latex.codecogs.com/png.latex?%5Cepsilon%20%5Csim%20%5Cmathcal%7BN%7D(0,%20%5Csigma_n%5E2)">, where <img src="https://latex.codecogs.com/png.latex?%5Csigma_n%5E2"> is the variance of the noise. In this way, it can be easily incorporated into the GP by adding a diagonal noise term to the kernel matrix:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BK%7D_n%20=%20%5Cmathbf%7BK%7D%20+%20%5Csigma_n%5E2%20%5Cmathbf%7BI%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"> is the kernel matrix computed on the training data and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BI%7D"> is the identity matrix.</p>
<p>Below is an interactive plot that demonstrates how noise influences the GP model. The plot shows the noisy training data (black points), from a noisy version of the true function <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20%5Csin(x)">, the black line. The plot also shows the GP mean prediction (blue line) for the squared exponential and Matérn kernels, along with the 95% confidence intervals. For <img src="https://latex.codecogs.com/png.latex?%5Csigma_n%5E2%20=%200">, the model perfectly interpolates the training data. For higher noise levels, the model becomes less certain about the observations, leading to a non-interpolating behavior, and the confidence intervals widen.</p>
<pre class="shinylive-python" data-engine="python"><code>#| standalone: true
#| viewerHeight: 475

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import multivariate_normal
from shiny import App, render, ui
from scipy.spatial.distance import cdist
from scipy.special import kv, gamma

# Define the kernel functions
def exponential_quadratic_kernel(x1, x2, l=1.0, sigma2=1.0):
    """Computes the exponential quadratic kernel (squared exponential kernel)."""
    sqdist = np.sum(x1**2, 1).reshape(-1, 1) + np.sum(x2**2, 1) - 2 * np.dot(x1, x2.T)
    return sigma2 * np.exp(-0.5 / l**2 * sqdist)

def matern_kernel(x1, x2, l=1.0, sigma2=1.0, nu=1.5):
    """Computes the Matérn kernel."""
    D = cdist(x1, x2, 'euclidean')
    const = (2**(1-nu))/gamma(nu)
    K = sigma2 * const * (np.sqrt(2*nu)*D/l)**nu * kv(nu, np.sqrt(2*nu)*D/l)
    # Replace NaN values with 1 for x == x'
    K[np.isnan(K)] = 1
    return K

# Define the input space
X = np.linspace(-4, 4, 100).reshape(-1, 1)

def plot_kernels_and_samples(noise_level):
    # Generate training data with noise
    X_train = np.array([-3, -2, -1, 1, 3.5]).reshape(-1, 1)
    y_train = np.sin(X_train) + noise_level * np.random.randn(X_train.shape[0], 1).reshape(-1,1)

    # Compute the kernel matrices for training data
    K_train_exp = exponential_quadratic_kernel(X_train, X_train) + noise_level**2 * np.eye(len(X_train))
    K_s_exp = exponential_quadratic_kernel(X_train, X)
    K_ss_exp = exponential_quadratic_kernel(X, X)
    
    K_train_matern = matern_kernel(X_train, X_train) + noise_level**2 * np.eye(len(X_train))
    K_s_matern = matern_kernel(X_train, X)
    K_ss_matern = matern_kernel(X, X)

    # Compute the mean and covariance of the posterior distribution for exponential kernel
    K_train_inv_exp = np.linalg.inv(K_train_exp)
    mu_s_exp = (K_s_exp.T.dot(K_train_inv_exp).dot(y_train)).reshape(-1)
    cov_s_exp = K_ss_exp - K_s_exp.T.dot(K_train_inv_exp).dot(K_s_exp)

    # Compute the mean and covariance of the posterior distribution for Matérn kernel
    K_train_inv_matern = np.linalg.inv(K_train_matern)
    mu_s_matern = (K_s_matern.T.dot(K_train_inv_matern).dot(y_train)).reshape(-1)
    cov_s_matern = K_ss_matern - K_s_matern.T.dot(K_train_inv_matern).dot(K_s_matern)

    # Sample 5 functions from the posterior distribution for both kernels
    samples_exp = multivariate_normal.rvs(mu_s_exp, cov_s_exp, 5)
    samples_matern = multivariate_normal.rvs(mu_s_matern, cov_s_matern, 5)

    # Create the plot
    fig, ax = plt.subplots(2, 1, figsize=(18, 6), sharex=True)

    # Plot the training data and GP predictions for exponential kernel
    ax[0].scatter(X_train, y_train, color='black', zorder=10, label='Noisy observations')
    ax[0].plot(X, mu_s_exp, color='blue', label='Mean')
    ax[0].plot(X, np.sin(X), color='black', label='True function')
    ax[0].fill_between(X.ravel(), mu_s_exp - 1.96 * np.sqrt(np.diag(cov_s_exp)), mu_s_exp + 1.96 * np.sqrt(np.diag(cov_s_exp)), color="blue", alpha=0.2, label='95% confidence interval')
    # for i in range(5):
    #     ax[0].plot(X, samples_exp[i], alpha=0.5, linestyle='--')
    ax[0].set_title(f"Squared exponential kernel")
    # ax[0].legend()

    # Plot the training data and GP predictions for Matérn kernel
    ax[1].scatter(X_train, y_train, color='black', zorder=10, label='Noisy observations')
    ax[1].plot(X, mu_s_matern, color="blue", label='Mean')
    ax[1].plot(X, np.sin(X), color="black", label='True function')
    ax[1].fill_between(X.ravel(), mu_s_matern - 1.96 * np.sqrt(np.diag(cov_s_matern)), mu_s_matern + 1.96 * np.sqrt(np.diag(cov_s_matern)), color="blue", alpha=0.2, label='95% confidence interval')
    # for i in range(5):
    #     ax[1].plot(X, samples_matern[i], alpha=0.5, linestyle='--')
    ax[1].set_title(f"Matérn kernel")
    # ax[1].legend()
    ax[1].set_xlabel("x")

    plt.tight_layout()
    return fig

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_slider("noise_level", "Noise Level (σ²ₙ):", min=0.0, max=1.0, value=0.0, step=0.01)
        ),
        ui.panel_main(
            ui.output_plot("kernelPlot")
        )
    )
)

def server(input, output, session):
    @output
    @render.plot
    def kernelPlot():
        noise_level = input.noise_level()
        fig = plot_kernels_and_samples(noise_level)
        return fig

app = App(app_ui, server)</code></pre>
</section>
<section id="applications" class="level2">
<h2 class="anchored" data-anchor-id="applications">Applications</h2>
<section id="bayesian-hyperparameter-tuning" class="level3">
<h3 class="anchored" data-anchor-id="bayesian-hyperparameter-tuning">Bayesian hyperparameter tuning</h3>
<p>Hyperparameter tuning is a critical yet challenging aspect of training neural networks. Finding the optimal combination of hyperparameters, such as learning rate, batch size, number of layers, and units per layer, can significantly enhance a model’s performance. Traditional methods like grid search and random search often prove to be inefficient and computationally expensive. This is where Bayesian optimization, powered by GPs, comes into play, offering a smarter approach to hyperparameter tuning.</p>
<p>Unlike exhaustive search methods, Bayesian optimization is more sample-efficient, meaning it can find optimal hyperparameters with fewer iterations. It works by</p>
<ol type="1">
<li>modeling the objective function (e.g., validation loss) as a GP in the hyperparameter space.</li>
<li>using an acquisition function to decide where to sample next. The acquisition function balances exploration (sampling in unexplored regions) and exploitation (sampling in regions with low loss) to guide the search towards the global optimum.</li>
</ol>
</section>
<section id="time-series-forecasting" class="level3">
<h3 class="anchored" data-anchor-id="time-series-forecasting">Time series forecasting</h3>
<p>GPs are also widely used in time series forecasting due to their flexibility and ability to model complex patterns in the data. By treating time series data as a function of time, Gaussian processes can capture the underlying dynamics and dependencies in the series. They can provide not only point estimates but also probabilistic forecasts, including prediction intervals that quantify uncertainty.</p>
</section>
</section>
<section id="references" class="level2">




</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-FORRESTER200950" class="csl-entry">
Forrester, Alexander I. J., and Andy J. Keane. 2009. <span>“Recent Advances in Surrogate-Based Optimization.”</span> <em>Progress in Aerospace Sciences</em> 45 (1): 50–79. <a href="https://www.sciencedirect.com/science/article/pii/S0376042108000766">https://www.sciencedirect.com/science/article/pii/S0376042108000766</a>.
</div>
<div id="ref-frazier2018tutorial" class="csl-entry">
Frazier, Peter I. 2018. <span>“<span class="nocase">A Tutorial on Bayesian Optimization</span>.”</span> <a href="https://arxiv.org/abs/1807.02811">https://arxiv.org/abs/1807.02811</a>.
</div>
<div id="ref-garnett_bayesoptbook_2023" class="csl-entry">
Garnett, Roman. 2023. <em><span>Bayesian Optimization</span></em>. Cambridge University Press.
</div>
</div></section></div> ]]></description>
  <category>machine-learning</category>
  <guid>https://ruglio.github.io/Web/posts/dkl/gp.html</guid>
  <pubDate>Mon, 24 Jun 2024 22:00:00 GMT</pubDate>
  <media:content url="https://ruglio.github.io/Web/posts/dkl/gp.png" medium="image" type="image/png" height="105" width="144"/>
</item>
</channel>
</rss>
